# -----------------------------------------------------------------------------------------------------------------
# --------------------------------------AccessTransformer configuration--------------------------------------------
# -----------------------------------------------------------------------------------------------------------------
#
# Comments can be added by using the prefix #. ANy lines starting with that character will be ignored by the access
# transformer. Comments can also be included on the ends of lines.
# 
#
# Method/Field Signatures
# -----------------------------------------------------------------------------------------------------------------
#   The access transformer follows the same method/field signature rules used by the JVM virtual machine.
#   For more information it is recommended to lookup JVM method and field signatures as well as JVM type arguments.
#
#   A method will use the following format:
#       <fully qualified class name>.<method name> (<type parameters>)<return type or V for void return types>
#
#   For a field you would use this format:
#       <fully qualified class name>.<field name>
#
#   The format for constructors goes exactly as that of a method with a void return type and method name of <init>.
#       <fully qualified class name>.<init> (<type parameters>)V
#
#   And static initialisers have a method name of <cinit>:
#       <fully qualified class name>.<cinit> (<type parameters>)V
#
#
#   Method return types and and parameters notation goes as follows:
#       Signatures for instance classes consist of the fully qualified name of the class with all '.'s replace
#       with '/', prefixed with 'L' and suffexed with ';'.
#           eg. For a string the signature would be: "Ljava/lang/String;"
#       
#       Primitive types are identified by one byte ascii character.
#           "B" - byte
#           "C" - char
#           "D" - double
#           "F" - float
#           "I" - int
#           "J" - long
#           "S" - short
#           "Z" - boolean
#           "V" - void (only used for return types
#
#       Arrays can be described by adding "[" at the begining of the signature for the type it contains.
#           eg. An array of Strings would be: "[Ljava/lang/string;"
# 
#   To apply a transformation to all fields/methods in a class you would simply replace their signature with a "*"
#       <fully qualified class name>.*
#
#
# Transformation Directives
# -----------------------------------------------------------------------------------------------------------------
#   Beside the normal method/field signatures entries in this table can also contain special prefixes as
#   instructions to the access transformer. It is required to have at least one instruction per entry.
# 
#   The access transformer currently only supports two operations.
#
#   Access Level Operation
#   - Accepted values (case insensitive):
#       PACKAGE (equivalent to no accessibility keyword)
#       PUBLIC
#       PROTECTED
#       PRIVATE
#   - Note:
#        Although the access transformer supports more strict access levels it is strongly discouraged to reduce
#        the access level. Doing that can cause serious problems in other code.
#
#   Final State Operation
#   - Accepted values:
#       -f              Used to indicate you wish to remove the final flag from a field/method
#       f               Used to indicate you wish to add the final flag (not a very good idea) to a field/method
#
#
#   Further more in order for the access transformer to understand what kind of target an entry is intended for
#   you must flag the entry with either of the following values (case sensitive):
#       FIELD
#       METHOD
#       CONSTRUCTOR
#
#   Different obfuscation levels are also supported for method/field signatures and are used by prefixing the
#   signature with the obfuscation level followed by an '@'
#   - Accepted values:
#       MCP         The pretty and easy to understand names inserted by MCP:
#                       MyClass.myAwesomMethodInMyClass(int id, int newValue)
#       SRG         The Searge names for classes methods and fields:
#                       MyClass.func_28128129473837(int par_0,int par_1)
#       OBF         Unmodified and fully obfuscated names: Aae.dd(int a,int b)
#
#
# -----------------------------------------------------------------------------------------------------------------
#   A complete entry in this configuration file will thus have the following format:
#       <transformation directive> <entry type| FIELD/METHOD> <obfuscation level>@<method or field descriptor>
#
# Note On Constructors:
#   There is an alternative way for defining entries for constructors which is to use the CONSTRUCTOR type
#   but this deviates slightly from the normal notation.
#   In the case of a constructor you only have to specify a set of classes following the notation for
#   parameter types and using spaces as delimiters. The Access Transformer will then attempt to convert that
#   into a proper constructor signature for a class taking the first item as the owner and subsequent classes
#   as parameter types.
#     
#   Eg. an entry that applies to a constructor would look as thus:
#       <transformation directive> CONSTRUCTOR <obfuscation level>@<fully qualified name of target class> <parameter type 1> ...
#       
#
#
# -----------------------------------------------------------------------------------------------------------------
# -----------------------------------------------------------------------------------------------------------------

-f FIELD MCP@net.minecraft.init.Blocks.* #Block references
-f FIELD MCP@net.minecraft.init.Items.* #Item references

public FIELD MCP@net.minecraft.util.Timer.ticksPerSecond

public FIELD MCP@net.minecraft.client.Minecraft.timer

public FIELD MCP@net.minecraft.entity.player.EntityPlayerMP.currentWindowId
public METHOD MCP@net.minecraft.entity.player.EntityPlayerMP.getNextWindowId ()V

public FIELD MCP@net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher.mapSpecialRenderers

public FIELD MCP@net.minecraft.tileentity.TileEntity.nameToClassMap
public FIELD MCP@net.minecraft.tileentity.TileEntity.classToNameMap

public METHOD MCP@net.minecraft.entity.EntityList.addMapping (Ljava/lang/Class;Ljava/lang/String;I)V

public FIELD MCP@net.minecraft.entity.EntityList.stringToClassMapping
public FIELD MCP@net.minecraft.entity.EntityList.classToStringMapping
public FIELD MCP@net.minecraft.entity.EntityList.idToClassMapping
public FIELD MCP@net.minecraft.entity.EntityList.classToIDMapping
public FIELD MCP@net.minecraft.entity.EntityList.stringToIDMapping

public FIELD MCP@net.minecraft.item.crafting.RecipesTools.recipePatterns

#IDToIParticleFactoryMapping
public FIELD MCP@net.minecraft.client.particle.EffectRenderer.particleTypes
#entityParticleEmitters
public FIELD MCP@net.minecraft.client.particle.EffectRenderer.particleEmitters

#IDToEnumParticleTypesMapping
public FIELD MCP@net.minecraft.util.EnumParticleTypes.PARTICLES

public FIELD MCP@net.minecraft.item.Item.BLOCK_TO_ITEM
public FIELD MCP@net.minecraft.client.Minecraft.modelManager
public FIELD MCP@net.minecraft.client.Minecraft.renderItem
public FIELD MCP@net.minecraft.client.renderer.block.statemap.BlockStateMapper.blockStateMap
public FIELD MCP@net.minecraft.client.resources.model.ModelBakery.variantNames

#Allow new creative tab types
-f FIELD MCP@net.minecraft.creativetab.CreativeTabs.creativeTabArray

#Make the WorldType constructor accessible to child classes
protected CONSTRUCTOR MCP@net.minecraft.world.WorldType I Ljava/lang/String; I

#Make WorldType.worldTypes non-final
-f FIELD MCP@net.minecraft.world.WorldType.worldTypes

public METHOD MCP@net.minecraft.world.World.isValid (Lnet/minecraft/util/BlockPos;)Z

#Allow access to internals of model box
public FIELD MCP@net.minecratf.client.model.ModelBox.vertexPositions
public FIELD MCP@net.minecratf.client.model.ModelBox.quadList